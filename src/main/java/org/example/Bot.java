package org.example;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.jsoup.nodes.Element;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Bot extends TelegramLongPollingBot {

    private Map<Long, User> userStates = new HashMap<>();

    @Override
    public String getBotUsername() {
        return "MaslyakWeatherBot";
    }

    @Override
    public String getBotToken() {
        return "7127897577:AAFZRTZ6hKhwrJBb4javxotyMtEj3xImDdM";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {

            Message message = update.getMessage();
            long idFromUser = update.getMessage().getFrom().getId();
            String text = update.getMessage().getText();
            IDB dataBase = DataBase.getInstance();
            Long chattID = message.getChatId();

            if (text.equalsIgnoreCase("/restart")) {
                setUserState(idFromUser, new ActionBot.StartState());
                sendText(idFromUser, "\uD83E\uDEE1 –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–≤–µ–¥–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ, —á—Ç–æ–±—ã —è –æ–±–Ω–æ–≤–∏–ª—Å—è \uD83E\uDEE8");
                return;
            }
            if (text.equalsIgnoreCase("console")) {
                String consoleMessage = "üõ† *–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞* üõ†\n\n" +
                        "1. `/load` - *–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ* –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö –≤ —á–∞—Ç–µ.\n" +
                        "2. `/delete` - *–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ* –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!\n" +
                        "3. `/update <—Å—Ç–∞—Ä–æ–µ —Å–ª–æ–≤–æ> <–Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ>` - *–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å* –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–æ–≤–æ–µ.\n" +
                        "4. `/restart` - *–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞*. –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n" +
                        "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π!";
                sendText(chattID, consoleMessage);
                return;
            }
            if (text.equalsIgnoreCase("/load")) {
                ArrayList<String> data = dataBase.loadData();
                String mgss = "";
                for (int i = 0; i < data.size(); i++) {
                    mgss += data.get(i) + "\n";
                }
                sendText(chattID, mgss);
                return;
            }
            if (text.equalsIgnoreCase("/delete")) {
                dataBase.deleteData();
                sendText(chattID, "–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã,\n –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞");
                return;
            }
            if (text.startsWith("/update ")) {
                String[] parts = text.split(" ", 3);
                if (parts.length == 3) {
                    String oldWord = parts[1];
                    String newWord = parts[2];
                    dataBase.updateData(oldWord, newWord);
                    sendText(chattID, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: '" + oldWord + "' –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ '" + newWord + "'");
                } else {
                    sendText(chattID, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: update <—Å—Ç–∞—Ä–æ–µ —Å–ª–æ–≤–æ> <–Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ>");
                }
                return;
            }
            dataBase.saveData(text);
            User state = userStates.getOrDefault(idFromUser, new ActionBot.StartState());
            System.out.println("Current State: " + state.getClass().getSimpleName());
            state.handle(this, update);
        } else {
            System.out.println("No message or text found in update");
        }
    }

    public void setUserState(long userId, User state) {
        userStates.put(userId, state);
    }

    public void sendText(Long who, String what) {
        if (what == null || what.trim().isEmpty()) {
            System.out.println("Error: Attempted to send an empty message");
            return;
        }
        SendMessage sm = SendMessage.builder()
                .chatId(who.toString())
                .text(what)
                .parseMode("Markdown")
                .build();
        try {
            execute(sm);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    public String getWeather(String city, Update update) {
        Message message = update.getMessage();
        IDB dataBaseAnswer = DataBaseAnswers.getInstance();
        Long chattID = message.getChatId();
        switch (city.toLowerCase()) {
            case "—à–∞–Ω—Ö–∞–π":
            case "1":
                String urlShanghai = "https://sinoptik.ua/%D0%BF%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0-%D1%88%D0%B0%D0%BD%D1%85%D0%B0%D0%B9";
                try {
                    Document doc = Jsoup.connect(urlShanghai).get();


                    Element temperatureElement = doc.selectFirst("._6fYCPKSx");
                    Element weatherDescElement = doc.selectFirst(".DGqLtBkd");

                    if (temperatureElement != null && weatherDescElement != null) {
                        String temperatureText = temperatureElement.text().trim();
                        String description = weatherDescElement.text().trim();

                        String temperatureNumber = temperatureText.replaceAll("[^\\d]", "");
                        if (!temperatureNumber.isEmpty()) {
                            int temperature = Integer.parseInt(temperatureNumber);
                            dataBaseAnswer.saveData("–í –®–∞–Ω—Ö–∞–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description);
                            return "–í –®–∞–Ω—Ö–∞–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description;
                        } else {
                            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ";
                        }
                    } else {
                        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ";
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ";
                }
            case "–¥–Ω–µ–ø—Ä":
            case "2":
                String urlDnipro = "https://sinoptik.ua/%D0%BF%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0-%D0%B4%D0%BD%D0%B5%D0%BF%D1%80-303007131";
                try {
                    Document doc = Jsoup.connect(urlDnipro).get();

                    Element nowWeatherElement = doc.selectFirst(".today-temp");
                    Element weatherDescElement = doc.selectFirst(".description");

                    if (nowWeatherElement != null && weatherDescElement != null) {
                        String temperatureText = nowWeatherElement.text().trim();
                        String description = weatherDescElement.text().trim();

                        String temperatureNumber = temperatureText.replaceAll("[^\\d]", "");
                        if (!temperatureNumber.isEmpty()) {
                            int temperature = Integer.parseInt(temperatureNumber);
                            dataBaseAnswer.saveData("–í –î–Ω–µ–ø—Ä–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description);
                            return "–í –î–Ω–µ–ø—Ä–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description;
                        } else {
                            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ";
                        }
                    } else {
                        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ";
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ";
                }
            case "–Ω—å—é-–π–æ—Ä–∫":
            case "3":
                String urlNewYork = "https://sinoptik.ua/%D0%BF%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0-%D0%BD%D1%8C%D1%8E-%D0%B9%D0%BE%D1%80%D0%BA";
                try {
                    Document doc = Jsoup.connect(urlNewYork).get();

                    Element temperatureElement = doc.selectFirst(".today-temp");
                    Element weatherDescElement = doc.selectFirst(".description");

                    if (temperatureElement != null && weatherDescElement != null) {
                        String temperatureText = temperatureElement.text().trim();
                        String description = weatherDescElement.text().trim();

                        String temperatureNumber = temperatureText.replaceAll("[^\\d]", "");
                        if (!temperatureNumber.isEmpty()) {
                            int temperature = Integer.parseInt(temperatureNumber);
                            dataBaseAnswer.saveData( "–í –ù—å—é-–ô–æ—Ä–∫–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description);
                            return "–í –ù—å—é-–ô–æ—Ä–∫–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description;
                        } else {
                            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ";
                        }
                    } else {
                        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ";
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ";
                }
            case "–¥—É–±–∞–π":
            case "4":
                String urlDubai = "https://sinoptik.ua/%D0%BF%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0-%D0%B4%D1%83%D0%B1%D0%B0%D0%B9";
                try {
                    Document doc = Jsoup.connect(urlDubai).get();

                    Element temperatureElement = doc.selectFirst("._6fYCPKSx");
                    Element weatherDescElement = doc.selectFirst(".DGqLtBkd");

                    if (temperatureElement != null && weatherDescElement != null) {
                        String temperatureText = temperatureElement.text().trim();
                        String description = weatherDescElement.text().trim();

                        String temperatureNumber = temperatureText.replaceAll("[^\\d]", "");
                        if (!temperatureNumber.isEmpty()) {
                            int temperature = Integer.parseInt(temperatureNumber);
                            dataBaseAnswer.saveData("–í –î—É–±–∞–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description);
                            return "–í –î—É–±–∞–µ —Å–µ–π—á–∞—Å " + temperature + "¬∞C, –ü–æ–≥–æ–¥–∞: " + description;
                        } else {
                            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ";
                        }
                    } else {
                        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ";
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ";
                }
            default:
                return "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.";
        }
    }
}
